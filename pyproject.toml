[project]
name = "enable_pre_commit_hooks"
version = "0.7.1"
description = "A project to contain all pre-commit hooks for enable technologies"
authors = [{ name = "Cloud Ops Admin", email = "cloudops@enable-technologies.com" }]
keywords = ["precommit", "conventional", "commits", "git"]
license = "Proprietary"
readme = "README.md"
requires-python = ">=3.13,<3.14"
dependencies = []
optional-dependencies = {dev = [
  "pytest (>=8.3.5,<9.0.0)", 
  "coverage (>=7.6.12,<8.0.0)", 
  "ruff (>=0.9.10,<0.10.0)", 
  "mypy (>=1.15.0,<2.0.0)", 
  "typos (>=1.30.2,<2.0.0)"
]}

[tool.commitizen]
version = "0.7.1"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
  "pyproject.toml:version",
  "src/enable/pre_commit_hooks/__init__.py",
  "VERSION"
]

[tool.poetry]
packages = [{include = "enable", from = "src"}]

[project.scripts]
check_poetry_toml = "enable.pre_commit_hooks.check_poetry_toml:main"
check_commit_msg = "enable.pre_commit_hooks.check_commit_msg:main"
check_uv_toml = "enable.pre_commit_hooks.check_uv_toml:main"

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
# pycodestyle (E) pycodestyle warnings (W) pyflakes (F) flake8-bugbear (B) isort (I) pep8-naming (N) 
# flake8-quotes (Q) pydocstyle (D) Copyright-related rules (CPY) pyupgrade (UP) flake8-comprehensions (C4)
# Ruff-specific rules (RUF) Perflint (PERF) flake8-pytest-style (PT) implicit-namespace-package (INP001)
# flake8-todos (TD) flake8-blind-except (BLE) flake8-simplify (SIM)
lint.select = ["E", "W", "F", "B", "Q", "I", "N", "Q", "D", "C4", "CPY001", "RUF", "PERF", "PT", "INP001", "TD", "BLE", "SIM"]
line-length = 140
preview = true
lint.ignore = ["RUF012", "D205", "TD003", "SIM108"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.flake8-copyright]
author = "Enable Technologies Inc"
notice-rgx = "(?i)Copyright Â© \\d{4}"

[tool.mypy]
strict = true
mypy_path = ["src", "tests"]

[tool.coverage.run]
source = [ "src/enable" ]
relative_files = true
data_file = "coverage-reports/.coverage"

[tool.coverage.xml]
output = "coverage-reports/coverage.xml"

[tool.coverage.html]
directory = "coverage-reports/htmlcov"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"